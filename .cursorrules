# Cursor Rules for Spawn App iOS SwiftUI

## Singleton Pattern Rules

### Do NOT use singletons as EnvironmentObjects
- **Rule**: Never instantiate singleton classes when passing them as environment objects
- **Correct**: Access singletons via their `.shared` property
- **Incorrect**: Creating new instances with `ClassName()` when a singleton exists

#### Examples:
```swift
// ❌ WRONG - Don't create new instances of singletons
.environmentObject(UserAuthViewModel())
.environmentObject(NotificationService())

// ✅ CORRECT - Use the shared instance
.environmentObject(UserAuthViewModel.shared)
.environmentObject(NotificationService.shared)
```

#### Rationale:
- Singletons maintain global state that should be consistent across the app
- Creating new instances breaks the singleton pattern and can cause state inconsistencies
- Using `.shared` ensures all parts of the app work with the same instance

#### Common singleton classes in this project:
- `UserAuthViewModel.shared`
- `NotificationService.shared`
- `KeychainService.shared`

### Additional SwiftUI Best Practices

#### Environment Objects
- Use `@EnvironmentObject` for shared state that needs to be accessed by multiple views
- Pass environment objects at the highest level possible in the view hierarchy
- Always use existing singleton instances rather than creating new ones

#### State Management
- Prefer `@StateObject` for view-owned objects
- Use `@ObservedObject` for objects passed down from parent views
- Use `@EnvironmentObject` for globally shared objects 