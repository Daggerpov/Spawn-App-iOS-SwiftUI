{
  "version": 1,
  "rules": [
    {
      "name": "Swift Indentation",
      "pattern": "\\.(swift)$",
      "rule": "Use tabs for indentation in Swift files"
    },
    {
      "name": "Function Spacing",
      "pattern": "\\.(swift)$",
      "rule": "Leave a single blank line between functions"
    },
    {
      "name": "Variable declarations",
      "pattern": "\\.(swift)$",
      "rule": "Group related property declarations together. Start with @Published properties, followed by dependencies, then private properties"
    },
    {
      "name": "Naming Convention",
      "pattern": "\\.(swift)$",
      "rule": "Use camelCase for properties, functions, and variables. Use PascalCase for types, protocols and file names"
    },
    {
      "name": "Commenting",
      "pattern": "\\.(swift)$",
      "rule": "Use Swift comment conventions: // for single-line comments and /* */ for multi-line comments. Each file should have a standard header comment"
    },
    {
      "name": "MARK Usage",
      "pattern": "\\.(swift)$",
      "rule": "Use MARK: - Section Name to organize code sections in larger files"
    },
    {
      "name": "Private Properties",
      "pattern": "\\.(swift)$",
      "rule": "Mark properties as private when they are only used within the class/struct"
    },
    {
      "name": "Trailing Whitespace",
      "pattern": "\\.(swift)$",
      "rule": "Remove trailing whitespace from all lines"
    },
    {
      "name": "Line Length",
      "pattern": "\\.(swift)$",
      "rule": "Keep line length under 100 characters when possible"
    },
    {
      "name": "Braces Style",
      "pattern": "\\.(swift)$",
      "rule": "Opening braces should be on the same line as the declaration, closing braces should be on a new line"
    },
    {
      "name": "Class/Struct Organization",
      "pattern": "\\.(swift)$",
      "rule": "Organize types in this order: properties, initializers, lifecycle methods, public methods, private methods"
    },
    {
      "name": "View Model Organization",
      "pattern": "\\.(swift)$",
      "rule": "In view models, group API calls together and separate them from UI-related code"
    },
    {
      "name": "SwiftUI View Organization",
      "pattern": "\\.(swift)$",
      "rule": "In SwiftUI views, organize in this order: properties, body, helper view methods, preview"
    },
    {
      "name": "Force Unwrapping",
      "pattern": "\\.(swift)$",
      "rule": "Avoid force unwrapping (!) optionals when possible. Use guard let, if let, or nil coalescing"
    },
    {
      "name": "Empty Lines",
      "pattern": "\\.(swift)$",
      "rule": "No consecutive empty lines (maximum one empty line)"
    },
    {
      "name": "Early Returns",
      "pattern": "\\.(swift)$",
      "rule": "Use early returns to reduce nesting and complexity"
    },
    {
      "name": "Self Usage",
      "pattern": "\\.(swift)$",
      "rule": "Use self explicitly only when required (in closures or to disambiguate)"
    },
    {
      "name": "File Organization",
      "pattern": "\\.(swift)$", 
      "rule": "Follow MVVM architecture with separate folders for Models, Views, ViewModels, and Services"
    },
    {
      "name": "Asset Naming",
      "pattern": "\\.(swift)$",
      "rule": "Use snake_case for asset names"
    },
    {
      "name": "Function Parameter Formatting",
      "pattern": "\\.(swift)$", 
      "rule": "For functions with multiple parameters that span multiple lines, align the parameters"
    },
    {
      "name": "Reusable Components",
      "pattern": "\\.(swift)$",
      "rule": "Create and use reusable components when UI patterns repeat across the application. Extract common UI elements into separate View files"
    },
    {
      "name": "APIService Usage",
      "pattern": "\\.(swift)$",
      "rule": "Always use the APIService methods for network calls. Never implement direct URL session calls in ViewModels"
    },
    {
      "name": "Singleton Pattern Usage",
      "pattern": "\\.(swift)$",
      "rule": "ALWAYS use AppCache.shared directly instead of creating @ObservedObject or @StateObject properties. Never use '@ObservedObject private var appCache = AppCache.shared' or similar patterns. Access AppCache.shared directly in code. For UserAuthViewModel, use UserAuthViewModel.shared directly as well."
    },
    {
      "name": "App Color Usage - Universal Colors",
      "pattern": "\\.(swift)$",
      "rule": "ALWAYS use app-defined colors from Constants.swift instead of SwiftUI's default colors. Use universalBackgroundColor instead of .white, universalAccentColor instead of .black or .primary, universalSecondaryColor instead of .accentColor. Never use Color.primary, Color.secondary, .white, .black directly."
    },
    {
      "name": "App Color Usage - Figma Colors",
      "pattern": "\\.(swift)$",
      "rule": "For UI elements that match the Figma design, ALWAYS use the figma-prefixed colors (figmaBlue, figmaSoftBlue, figmaBlack300, figmaBlack400, figmaGreen, figmaBittersweetOrange) instead of creating custom colors or using SwiftUI defaults."
    },
    {
      "name": "App Color Usage - Backgrounds",
      "pattern": "\\.(swift)$",
      "rule": "For backgrounds, use universalBackgroundColor for main backgrounds, authPageBackgroundColor for auth screens. Never use Color.white, .background, or system background colors directly."
    },
    {
      "name": "App Color Usage - Text Colors",
      "pattern": "\\.(swift)$",
      "rule": "For text colors, use universalAccentColor for primary text, figmaBlack300 for secondary text, universalPlaceHolderTextColor for placeholder text. Avoid .primary, .secondary, or .foregroundColor without specifying the exact color."
    },
    {
      "name": "App Color Usage - Interactive Elements",
      "pattern": "\\.(swift)$",
      "rule": "For buttons and interactive elements, use figmaBlue for primary actions, figmaSoftBlue for secondary actions, universalPassiveColor for disabled states. Never use system accent colors or .tint without explicit color definition."
    },
    {
      "name": "App Color Usage - Activity Colors",
      "pattern": "\\.(swift)$",
      "rule": "For activity-related UI, use the predefined activityColors array or activityColorHexCodes. Each activity should have consistent color usage across all screens."
    },
    {
      "name": "Color Constants Import",
      "pattern": "\\.(swift)$",
      "rule": "All color constants are defined in Views/Helpers/Constants.swift. Import this file or ensure colors are accessible when creating new views. Never hardcode hex values directly in views."
    }
  ],
  "terminal_safety": {
    "file_deletion": {
      "forbidden_commands": [
        "sudo rm -rf",
        "rm -rf ~/Library",
        "rm -rf /Library",
        "rm -rf /System"
      ],
      "rules": [
        "NEVER suggest 'sudo rm -rf' commands involving system directories or user library folders",
        "NEVER suggest deleting entire DerivedData directories without explicit user confirmation",
        "ALWAYS use specific file paths rather than wildcards when deleting",
        "PREFER less destructive alternatives like 'xcodebuild clean' over manual deletion"
      ]
    },
    "sudo_usage": {
      "rules": [
        "AVOID suggesting sudo commands unless absolutely necessary",
        "ALWAYS explain why sudo is needed and what the command does",
        "PREFER user-level solutions over system-level changes"
      ]
    },
    "build_issues": {
      "preferred_order": [
        "Try 'xcodebuild clean' first",
        "Suggest restarting Xcode or simulator second",
        "Manual file deletion only as last resort with user confirmation"
      ]
    },
    "swiftui_best_practices": {
      "real_time_updates": [
        "ALWAYS ensure UI updates happen on MainActor",
        "ALWAYS call objectWillChange.send() after data mutations",
        "PREFER @ObservedObject over @StateObject for passed view models"
      ],
      "component_organization": [
        "AVOID duplicate layout components across files",
        "PREFER shared components in dedicated files",
        "ENSURE proper state management for reactive UIs"
      ]
    }
  }
} 